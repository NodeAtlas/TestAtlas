<h2 id="production-environment">Production Environment</h2><p>It's a good thing to develop, but it's time to run your website or apps on online production server. See this examples.</p><blockquote>
<p>IMPORTANT : you must use the <code>"cache": true</code> option in the production's webconfig to allows engine to be optimised or set your <code>NODE_ENV</code> environment variable to <code>production</code>.</p>
</blockquote><hr><blockquote>
<p>NOTE : it's possible your proxy on production not capable to use websockets. In this case, the transport should be limited like this <code>"socketServerOptions": { transports: ['polling'] }</code> (in default without this value, transports are tested progressively like this <code>{ transports: ['polling', 'websocket'] }</code>.</p>
</blockquote><h3 id="in-a-windows-server-environment-with-iisnode">In a Windows Server environment with iisnode</h3><p>In a Windows Server 2013 environment with IIS8 the requirements are:</p><ol>
<li>Install <a href="http://nodejs.org/download/">the node.exe executable</a> able to run JavaScript code.</li>
<li>Install <a href="http://www.iis.net/downloads/microsoft/url-rewrite">the IIS8 UrlRewrite module</a> to map pages executed to an output URL.</li>
<li>Install <a href="https://github.com/tjanczuk/iisnode/downloads">the IIS8 issnode module</a> to read web.config and to manage the website (IIS Application Pool Management, start/stop website, etc...).</li>
</ol><h4 id="create-application">Create application</h4><p>In IIS8, create a web site and create an Application.</p><p>The content of your application will be the site mixed with that of NodeAtlas. So that means this:</p><pre><code>node-atlas/
├─ node_modules/
│  ┊┉
├─ languages/
│  ┊┉
│  └─ default.json
┊┉
└─ index.js
site-hello-world/
├─ assets/
│  ┊┉
├─ views/
│  └─ index.htm
└─ webconfig.json
</code></pre><p>becomes this:</p><pre><code>site-hello-world/
├─ node_modules/
│  ┊┉
├─ languages/
│  ┊┉
│  └─ default.json
┊┉
├─ assets/
│  ┊┉
├─ views/
│  └─ index.htm
├─ index.js
└─ webconfig.json
</code></pre><p>You will add to this set of files, additional file named <code>web.config</code> whose content is:</p><pre><code class="lang-xml">&lt;configuration&gt;
    &lt;system.webServer&gt;
        &lt;handlers&gt;
            &lt;add name="iisnode" path="node-atlas.js" verb="*" modules="iisnode" /&gt;
        &lt;/handlers&gt;
        &lt;rewrite&gt;
            &lt;rules&gt;
                &lt;rule name="LogFile" patternSyntax="ECMAScript" stopProcessing="true"&gt;
                     &lt;match url="^[a-zA-Z0-9_\-]+\.js\.logs\/\d+\.txt$"/&gt;
                &lt;/rule&gt;
                &lt;rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true"&gt;
                    &lt;match url="^node-atlas.js\/debug[\/]?" /&gt;
                &lt;/rule&gt;
                &lt;rule name="StaticContent"&gt;
                     &lt;action type="Rewrite" url="assets{REQUEST_URI}"/&gt;
                &lt;/rule&gt;
                &lt;rule name="DynamicContent"&gt;
                     &lt;conditions&gt;
                          &lt;add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true"/&gt;
                     &lt;/conditions&gt;
                     &lt;action type="Rewrite" url="node-atlas.js"/&gt;
                &lt;/rule&gt;
            &lt;/rules&gt;
        &lt;/rewrite&gt;
    &lt;/system.webServer&gt;
&lt;/configuration&gt;
</code></pre><p>to obtain:</p><pre><code>site-hello-world/
├─ node_modules/
│  ┊┉
├─ languages/
│  ┊┉
│  └─ default.json
┊┉
├─ assets/
│  ┊┉
├─ views/
│  └─ index.htm
├─ index.js
├─ webconfig.json
└─ web.config
</code></pre><p>It will just have to click on "Browse <url-of-site>" in your IIS8 action panel. You can now manage your website (start / stop / Pool Recycling) like any other IIS8 application.</url-of-site></p><h4 id="webconfig-example">webconfig example</h4><p>An example for a production webconfig:</p><pre><code class="lang-json">{
    "urlPort": 80,
    "httpPort": 7777,
    "httpHostname": "www.example.com",
    "routes": {
        ...
    }
}
</code></pre><h3 id="in-a-unix-environment-with-forever">In a Unix environment with forever</h3><p>This requires:</p><ol>
<li>Install <a href="http://nodejs.org/download/">the node.exe executable</a> able to run JavaScript code.</li>
<li>Install <a href="https://github.com/nodejitsu/forever">the CLI tool forever</a> manager for your websites continuously (start, stop, restart, etc.).</li>
<li>Running in addition of your websites a reverse-proxy running on port 80 for all applications.</li>
</ol><h4 id="some-forever-commands">Some forever commands</h4><p>To manage a new website in continues to be used the command:</p><pre><code>$ forever start &lt;/path/to/&gt;node-atlas/ --path &lt;/path/to/your/website/directory/&gt;
</code></pre><p>To stop it, localise the <strong>uid</strong> with the <code>list</code> forever command</p><pre><code>$ forever list
</code></pre><p>and then use the command:</p><pre><code>$ forever stop &lt;uid&gt;
</code></pre><p>or <code>&lt;uid&gt;</code> is the <strong>uid</strong> of running website.</p><h4 id="webconfig-example">webconfig example</h4><p>An example for a production webconfig:</p><pre><code class="lang-json">{
    "urlPort": 80,
    "httpPort": 7777,
    "httpHostname": "www.example.com",
    "routes": {
        ...
    }
}
</code></pre><p>You will then use a reverse proxy to make your site accessible on port 80.</p><h4 id="in-a-unix-environment-with-nginx">In a Unix environment with Nginx</h4><p>This is an example of Nginx's configuration:</p><pre><code class="lang-javascript">## Server an.example.fr

upstream websocket {
    server Ip_backend:7777;
}

server {

    listen   80;
    server_name an.example.fr;

        keepalive_timeout    60;

    access_log on;

        access_log /var/log/nginx/access.log logstash;
    error_log /var/log/nginx/error-an.example.fr.log;

    location /socket.io/ {
            proxy_pass http://websocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
    }

    location / {
        proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;

            proxy_pass http://websocket;
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        proxy_redirect off;

    }

    error_page 400 401 402 403 405 406 407 408 409 410 411 412 413 414 415 416 417 500 501 502 503 504 505 506 507 /error.html;

    location = /error.html {
            root /var/www/nginx-default;
    }
}
</code></pre><p><code>Ip_backend</code> must be replaced by your private subnetwork IP. That can be <code>127.0.0.1</code> if node run in same server as Nginx.</p><p><code>websocket</code> should be replaced by any word, it will be also moddify the <code>proxy_pass</code>. It must be unique to each node.</p><h3 id="proxy">Proxy</h3><h4 id="bouncy">Bouncy</h4><p>Bouncy is an example of reverse-proxy that you can use to run various NodeAtlas websites (with other types of websites) together on the same port (80).</p><p>You can for example:</p><ul>
<li>run 3 Node.js apps on ports 7777, 7778 and 7779 with forever,</li>
<li>and besides launching a apache server on port 81</li>
</ul><p>and make all your websites accessible behind domain names on port 80 with Bouncy example.</p><p>Here is a sample configuration with Bouncy:</p><p><em>global-server.js</em></p><pre><code class="lang-javascript">var bouncy = require('bouncy');

var server = bouncy(function (request, response, bounce) {
    if (request.headers.host === 'beep.example.com') {
        bounce(7777);
    }
    else if (request.headers.host === 'blup.example.com') {
        bounce(7776);
    }
    else if (request.headers.host === 'boop.example.com') {
        bounce(81);
    }
    else {
        response.statusCode = 404;
        response.end('no such host');
    }
});

server.listen(80);
</code></pre><p>and you can start with:</p><pre><code>$ forever start &lt;/path/to/&gt;global-server.js
</code></pre><p><a href="https://github.com/substack/bouncy">More information about Bouncy</a></p>